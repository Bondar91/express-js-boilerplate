// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 Int                  @id @default(autoincrement())
    public_id          String               @unique @default(uuid())
    name               String               @db.VarChar(50)
    surname            String               @db.VarChar(50)
    email              String               @unique @db.VarChar(100)
    password           String               @db.VarChar(255)
    refreshToken       String?              @db.VarChar(1000)
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    OrganizationMember OrganizationMember[]
}

model Organization {
    id                 Int                  @id @default(autoincrement())
    public_id          String               @unique @default(uuid())
    name               String               @db.VarChar(255)
    slug               String               @unique
    type               String               @default("club")
    address            String?              @db.VarChar(255)
    city               String?              @db.VarChar(100)
    postalCode         String?              @db.VarChar(20)
    country            String?              @default("PL") @db.VarChar(2)
    phone              String?              @db.VarChar(20)
    email              String?              @db.VarChar(100)
    website            String?              @db.VarChar(255)
    settings           Json?
    active             Boolean              @default(true)
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    OrganizationMember OrganizationMember[]
}

model OrganizationMember {
    id             Int      @id @default(autoincrement())
    public_id      String   @unique @default(uuid())
    organizationId Int
    userId         Int
    joinedAt       DateTime @default(now())

    organization Organization @relation(fields: [organizationId], references: [id])
    user         User         @relation(fields: [userId], references: [id])

    // Indeks unikalno≈õci
    @@unique([organizationId, userId])
}
